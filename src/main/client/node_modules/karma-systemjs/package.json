{
  "_args": [
    [
      "karma-systemjs@https://registry.npmjs.org/karma-systemjs/-/karma-systemjs-0.13.0.tgz",
      "c:\\projects\\RichWebClientTraining\\RichWebClientTypeScript"
    ]
  ],
  "_from": "karma-systemjs@0.13.0",
  "_id": "karma-systemjs@0.13.0",
  "_inCache": true,
  "_location": "/karma-systemjs",
  "_phantomChildren": {
    "brace-expansion": "1.1.5"
  },
  "_requested": {
    "name": "karma-systemjs",
    "raw": "karma-systemjs@https://registry.npmjs.org/karma-systemjs/-/karma-systemjs-0.13.0.tgz",
    "rawSpec": "https://registry.npmjs.org/karma-systemjs/-/karma-systemjs-0.13.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/karma-systemjs/-/karma-systemjs-0.13.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/karma-systemjs/-/karma-systemjs-0.13.0.tgz",
  "_shasum": "ac5259bc9d46c51a0d0d6aa8a3de9fe2acdad737",
  "_shrinkwrap": null,
  "_spec": "karma-systemjs@https://registry.npmjs.org/karma-systemjs/-/karma-systemjs-0.13.0.tgz",
  "_where": "c:\\projects\\RichWebClientTraining\\RichWebClientTypeScript",
  "author": {
    "email": "rolaveric@gmail.com",
    "name": "Jason Stone"
  },
  "bugs": {
    "url": "https://github.com/rolaveric/karma-systemjs/issues"
  },
  "contributors": "Kendrick Burson <spam.kpb@gmail.com>",
  "dependencies": {
    "lodash": "^3.10.1",
    "minimatch": "^3.0.0"
  },
  "description": "A Karma plugin.  Adapter for SystemJS module loader.",
  "devDependencies": {
    "babel-core": "^6.0.14",
    "es6-module-loader": "^0.17.8",
    "jasmine-core": "^2.3.4",
    "jasmine-node": "^1.14.5",
    "karma": "^0.13.14",
    "karma-firefox-launcher": "^0.1.6",
    "karma-jasmine": "^0.3.6",
    "karma-phantomjs-launcher": "^0.2.1",
    "phantomjs": "^1.9.18",
    "phantomjs-polyfill": "0.0.1",
    "systemjs": "^0.19.5",
    "traceur": "^0.0.92",
    "typescript": "^1.6.2"
  },
  "homepage": "https://github.com/rolaveric/karma-systemjs",
  "keywords": [
    "karma-adapter",
    "karma-plugin",
    "systemjs"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "karma-systemjs",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/rolaveric/karma-systemjs.png?branch=master)](https://travis-ci.org/rolaveric/karma-systemjs)\n[![GitHub version](http://img.shields.io/github/tag/rolaveric/karma-systemjs.svg)](https://github.com/rolaveric/karma-systemjs)\n[![NPM version](http://img.shields.io/npm/v/karma-systemjs.svg)](https://npmjs.org/package/karma-systemjs)\n[![Downloads](http://img.shields.io/npm/dm/karma-systemjs.svg)](https://npmjs.org/package/karma-systemjs)\n# karma-systemjs\n[Karma](http://karma-runner.github.io/) plugin for using [SystemJS](https://github.com/systemjs/systemjs) as a module loader.\n\n`karma-systemjs` works by loading files with `System.import()` instead of including them with `<script/>`, as Karma normally does. \n\n# Installation\n\nInstall from npm, along with `systemjs`, `es6-module-loader`, and your transpiler:\n\n`npm install karma-systemjs systemjs es6-module-loader babel-core`\n\nMake sure all your dependencies, including SystemJS itself, are specified in your SystemJS config.  \nThis is so karma-systemjs can add them to the list of files that karma serves.\n\n```js\n// system.conf.js\nSystem.config({\n\tpaths: {\n\t\t'babel': 'node_modules/babel-core/browser.js',\n\t\t'systemjs': 'node_modules/systemjs/dist/system.js',\n\t\t'system-polyfills': 'node_modules/systemjs/dist/system-polyfills.js',\n\t\t'es6-module-loader': 'node_modules/es6-module-loader/dist/es6-module-loader.js'\n\t}\n});\n```\n\nDependencies can be specified under `paths` or `map`.\n\n```js\n// system.conf.js\nSystem.config({\n\tmap: {\n\t\t'babel': 'node_modules/babel-core/browser.js',\n\t\t'systemjs': 'node_modules/systemjs/dist/system.js',\n\t\t'system-polyfills': 'node_modules/systemjs/dist/system-polyfills.js',\n\t\t'es6-module-loader': 'node_modules/es6-module-loader/dist/es6-module-loader.js'\n\t}\n});\n```\n\n# Karma Configuration\n\nAdd `karma-systemjs` to your list of plugins:\n\n`plugins: ['karma-systemjs', ...]`\n\nAdd `systemjs` to your list of frameworks, (NB. must be included as first framework in list):\n\n`frameworks: ['systemjs', ...]`\n\nAdd SystemJS configuration:\n\n```js\n// karma.conf.js\nsystemjs: {\n\t// Path to your SystemJS configuration file\n\tconfigFile: 'app/system.conf.js',\n\n\t// Patterns for files that you want Karma to make available, but not loaded until a module requests them. eg. Third-party libraries.\n\tserveFiles: [\n\t\t'lib/**/*.js'\n\t],\n\n\t// SystemJS configuration specifically for tests, added after your config file.\n\t// Good for adding test libraries and mock modules\n\tconfig: {\n\t\tpaths: {\n\t\t\t'angular-mocks': 'bower_components/angular-mocks/angular-mocks.js'\n\t\t}\n\t}\n}\n```\n\nkarma-systemjs defaults to using Traceur as transpiler.  \nYou can specify another transpiler (eg. `babel` or `typescript`) by adding it to your SystemJS config:\n\n```js\nSystem.config({\n\ttranspiler: 'babel'\n})\n```\n\nThe transpiler can also be omitted by setting `transpiler` to `null`.\n\nkarma-systemjs looks up the paths for `es6-module-loader`, `systemjs`, and your transpiler (`babel`, `traceur`, or `typescript`)\nin the `paths` or `map` object of your SystemJS configuration.  \n\n```js\nsystemjs: {\n\tconfig: {\n\t\tpaths: {\n\t\t\t'es6-module-loader': 'bower_components/es6-module-loader/dist/es6-module-loader.js'\n\t\t}\n\t}\n}\n```\n\n## I'm getting a \"TypeError: 'undefined' is not a function\" when using PhantomJS\n\nPhantomJS v1.x doesn't provide the `Function.prototype.bind` method, which is used by some transpilers.  \nThe best solution is to install `phantomjs-polyfill` and include it in your SystemJS config.\n\n`npm install phantomjs-polyfill`\n\n```js\nSystem.config({\n\tpaths: {\n\t\t'phantomjs-polyfill': 'node_modules/phantomjs-polyfill/bind-polyfill.js'\n\t}\n});\n```\n\n## Can I still use this with `karma-coverage`?\n\nAbsolutely, but you'll need to configure `karma-coverage` to use an instrumenter which supports ES6.\n\n- [Isparta](https://github.com/douglasduteil/isparta): Uses [Babel](https://babeljs.io/)\n- [Ismailia](https://github.com/Spote/ismailia): Uses [Traceur](https://github.com/google/traceur-compiler)\n\n```js\npreprocessors: {\n\t'src/!(*spec).js': ['coverage'],\n},\n\ncoverageReporter: {\n\tinstrumenters: { isparta : require('isparta') },\n\tinstrumenter: {\n\t\t'**/*.js': 'isparta'\n\t}\n}\n```\n\n# I'm getting a \"window.chai is undefined\" error!\n\n`karma-systemjs` hijacks every pattern added to `files` with `{included: true}`, which may include changes applied by other plugins - such as `karma-chai`.  \nThe solution is to make sure `systemjs` is the first item in your `frameworks` list, so it won't affect the other frameworks.\n\n`frameworks: ['systemjs', 'chai']`\n\n# 'src/**/*Spec.js' only matches files in src's subfolders\n\nThis appears to be a quirk in [`minimatch`](https://www.npmjs.com/package/minimatch), the glob engine used by both `karma` and `karma-systemjs`.  \nThe problem is that the second `/` is treated as a static part of the pattern. So the shortest path it will match is `src//Spec.js`.\n\nSimplest solution is to double up your patterns - one for the folder, and another for the subfolder.  \n`['src/*Spec.js', 'src/**/*Spec.js']`\n\n# What if I *need* some files to be included through script tags?\n\nYou can add patterns for these files to `systemjs.includeFiles`.\nAny patterns in this array will be kept at the start of the `files` list (ie. Before SystemJS and everything else) as is.\n\n# Examples\n\n* [angular-seed](https://github.com/rolaveric/angular-seed/tree/es6)\n* [angular-phonecat](https://github.com/rolaveric/angular-phonecat/tree/es6)\n* [aurelia-typescript-tests](https://github.com/ryanwischkaemper/aurelia-typescript-tests): A great example of using Typescript\n\n# Breaking Changes\n\n* v0.13.0: Transpiler is only served, not included, forcing SystemJS to load them.\n* v0.12.0: `phantomjs-polyfill` is only included if found in SystemJS config.\n* v0.11.0: `es6-module-loader` and `system-polyfills` are only included if found in SystemJS config.\n* v0.10.0: Changed `require.resolve()` static path for babel's `browser.js`\n* v0.9.0: Arrays in SystemJS config file are overwritten by arrays in karma config, rather than merged. [Discussion](https://github.com/rolaveric/karma-systemjs/issues/9#issuecomment-152029085) \n* v0.8.0: MAJOR CHANGE! `System.import()` is now used to load every file which would normally be `{included: true}` by Karma, without `karma-systemjs`.\n* v0.7.0: Takes over setting `baseURL` to handle SystemJS v0.18.0 restrictions\n* v0.6.0: Deprecated looking up modules in `node_modules/` using `require.resolve()`\n* v0.5.0: Updated to work with SystemJS v0.17.1, which comes with it's own [breaking changes](https://github.com/systemjs/systemjs/releases/tag/0.17.0).\n* v0.4.0: Looks for babel's browser.js under `babel-core` instead of `babel` from `require.resolve()`.  \nBetter off setting `paths.babel` in your SystemJS config.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rolaveric/karma-systemjs.git"
  },
  "scripts": {
    "test": "node ./node_modules/jasmine-node/bin/jasmine-node ./test/framework.spec.js && node ./node_modules/karma/bin/karma start karma.conf.js --single-run"
  },
  "version": "0.13.0"
}
