{
  "_args": [
    [
      "gulp-tslint@https://registry.npmjs.org/gulp-tslint/-/gulp-tslint-5.0.0.tgz",
      "c:\\projects\\RichWebClientTraining\\RichWebClientTypeScript"
    ]
  ],
  "_from": "gulp-tslint@5.0.0",
  "_id": "gulp-tslint@5.0.0",
  "_inCache": true,
  "_location": "/gulp-tslint",
  "_phantomChildren": {},
  "_requested": {
    "name": "gulp-tslint",
    "raw": "gulp-tslint@https://registry.npmjs.org/gulp-tslint/-/gulp-tslint-5.0.0.tgz",
    "rawSpec": "https://registry.npmjs.org/gulp-tslint/-/gulp-tslint-5.0.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/gulp-tslint/-/gulp-tslint-5.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-tslint/-/gulp-tslint-5.0.0.tgz",
  "_shasum": "b2e94c625379fcb5b017cdec39f9b06bad19e81e",
  "_shrinkwrap": null,
  "_spec": "gulp-tslint@https://registry.npmjs.org/gulp-tslint/-/gulp-tslint-5.0.0.tgz",
  "_where": "c:\\projects\\RichWebClientTraining\\RichWebClientTypeScript",
  "analyze": true,
  "author": {
    "email": "panu.horsmalahti@iki.fi",
    "name": "Panu Horsmalahti"
  },
  "bugs": {
    "url": "https://github.com/panuhorsmalahti/gulp-tslint/issues"
  },
  "contributors": [
    {
      "name": "Panu Horsmalahti",
      "email": "panu.horsmalahti@iki.fi"
    }
  ],
  "dependencies": {
    "gulp-util": "~3.0.7",
    "map-stream": "~0.1.0",
    "through": "~2.3.8"
  },
  "description": "TypeScript linter Gulp plugin",
  "devDependencies": {
    "gulp": "^3.9.1",
    "gulp-concat": "^2.6.0",
    "gulp-typescript": "^2.13.0",
    "tslint": "^3",
    "typescript": "latest"
  },
  "engines": {
    "node": ">=0.10"
  },
  "homepage": "https://github.com/panuhorsmalahti/gulp-tslint#readme",
  "keywords": [
    "gulp",
    "gulpfriendly",
    "gulpplugin",
    "lint",
    "linter",
    "plugin",
    "ts",
    "tslint",
    "typescript"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "gulp-tslint",
  "optionalDependencies": {},
  "peerDependencies": {
    "tslint": "^3.7.3 || 3.7.0-dev.5 || >=3.8.0-dev || >=3.9.0-dev || >=3.10.0-dev || >=3.11.0-dev"
  },
  "preferGlobal": false,
  "readme": "gulp-tslint\n===========\n\n[![Build Status](https://travis-ci.org/panuhorsmalahti/gulp-tslint.svg?branch=master)](https://travis-ci.org/panuhorsmalahti/gulp-tslint)\n[![Dependency Status](https://david-dm.org/panuhorsmalahti/gulp-tslint.svg)](https://david-dm.org/panuhorsmalahti/gulp-tslint)\n\nTypeScript linter plugin for Gulp.\n\n\nFirst install gulp-tslint\n```shell\nnpm install --save-dev gulp-tslint\n```\n\n##### Peer dependencies\n\nThe `tslint` module is a peer dependency of `gulp-tslint`, which allows you to update tslint independently from gulp-tslint.\n\nUsage:\n```typescript\n// Importing in ES6\nimport tslint from \"gulp-tslint\";\n\n// or requiring in ES5\nvar tslint = require(\"gulp-tslint\");\n\ngulp.task(\"tslint\", () =>\n    gulp.src(\"source.ts\")\n        .pipe(tslint())\n        .pipe(tslint.report(\"verbose\"))\n);\n```\n\nTypes should work automatically with TypeScript 1.6 or newer when used in TypeScript.\n\n**tslint.json** is attempted to be read from near the input file.\nIt **must be available** or supplied directly through the options.\n\nThe output (stringified JSON) is added to file.tslint.output.\nYou can output the errors by using reporters.\nThere are five default reporters:\n* \"json\" prints stringified JSON to console.log.\n* \"prose\" prints short human-readable failures to console.log.\n* \"verbose\" prints longer human-readable failures to console.log.\n* \"full\" is like verbose, but displays full path to the file\n* \"msbuild\" for Visual Studio\n\nReporters are executed only if there is at least one failure.\n\nIf there is at least one failure a PluginError is\nemitted after execution of the reporters:\n```javascript\n[gulp] Error in plugin 'gulp-tslint': Failed to lint: input.ts\n```\n\nYou can prevent emiting the error by setting emitError in report options to false.\n\n```javascript\ngulp.task(\"invalid-noemit\", () =>\n    gulp.src(\"input.ts\")\n        .pipe(tslint())\n        .pipe(tslint.report(\"prose\", {\n          emitError: false\n        }))\n);\n```\n\nYou can summarize the gulp error message to the number of errors by setting summarizeFailureOutput in report options.\n\n```javascript\ngulp.task(\"invalid-noemit\", () =>\n    gulp.src(\"input.ts\")\n        .pipe(tslint())\n        .pipe(tslint.report(\"prose\", {\n          summarizeFailureOutput: true\n        }))\n);\n```\n\nYou can use your own reporter by supplying a function.\n```javascript\n/* output is in the following form:\n * [{\n *   \"name\": \"invalid.ts\",\n *   \"failure\": \"missing whitespace\",\n *   // Lines and characters start from 0\n *   \"startPosition\": {\"position\": 8, \"line\": 0, \"character\": 8},\n *   \"endPosition\": {\"position\": 9, \"line\": 0, \"character\": 9},\n *   \"ruleName\": \"one-line\"\n * }]\n */\nconst testReporter = function (output, file, options) {\n    // file is a reference to the vinyl File object\n    console.log(\"Found \" + output.length + \" errors in \" + file.path);\n    // options is a reference to the reporter options, e.g. including the emitError boolean\n};\n\ngulp.task(\"invalid-custom\", () =>\n    gulp.src(\"input.ts\")\n        .pipe(tslint())\n        .pipe(tslint.report(testReporter))\n);\n```\n\ntslint.json can be supplied as a parameter by setting the configuration property.\n```javascript\ngulp.task(\"tslint-json\", () =>\n    gulp.src(\"input.ts\")\n        .pipe(tslint({\n            configuration: {\n              rules: {\n                \"class-name\": true,\n                // ...\n              }\n            }\n        }))\n        .pipe(tslint.report(\"prose\"))\n);\n```\n\nYou can also supply a file path to the configuration option, and the file name\ndoesn't need to be tslint.json.\n\n```javascript\n.pipe(tslint({\n    // contains rules in the tslint.json format\n    configuration: \"source/settings.json\"\n}))\n```\n\nReport limits\n-------------\n\nYou can optionally specify a report limit in the .report options that will turn off reporting for files after the limit has been reached. If the limit is 0 or less, the limit is ignored, which is the default setting.\n\n```javascript\ngulp.task(\"tslint\", () =>\n    gulp.src([\"input.ts\",])\n        .pipe(tslint())\n        .pipe(tslint.report(\"prose\", {\n            reportLimit: 2\n        }))\n);\n```\n\nSpecifying the tslint module\n----------------------------\n\nIf you want to use a different version of tslint, you can supply it with the `tslint` option.\n\n```bash\nnpm install tslint@next\n```\n\n```javascript\n.pipe(tslint({\n    tslint: require(\"tslint\")\n}));\n```\n\nAll default tslint options\n--------------------------\n\n```javascript\nconst tslintOptions = {\n    configuration: {},\n    rulesDirectory: null,\n    tslint: null\n};\n```\n\nAll default report options\n--------------------------\n\n```javascript\nconst reportOptions = {\n    emitError: true,\n    reportLimit: 0,\n    summarizeFailureOutput: false\n};\n```\n\nDevelopment\n===========\n\nFork this repository, run npm install and send pull requests. The project can be build with ``gulp`` command.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/panuhorsmalahti/gulp-tslint.git"
  },
  "typings": "index",
  "version": "5.0.0"
}
