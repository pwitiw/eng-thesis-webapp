{
  "_args": [
    [
      "gulp-filter@https://registry.npmjs.org/gulp-filter/-/gulp-filter-4.0.0.tgz",
      "c:\\projects\\RichWebClientTraining\\RichWebClientTypeScript"
    ]
  ],
  "_from": "gulp-filter@4.0.0",
  "_id": "gulp-filter@4.0.0",
  "_inCache": true,
  "_location": "/gulp-filter",
  "_phantomChildren": {},
  "_requested": {
    "name": "gulp-filter",
    "raw": "gulp-filter@https://registry.npmjs.org/gulp-filter/-/gulp-filter-4.0.0.tgz",
    "rawSpec": "https://registry.npmjs.org/gulp-filter/-/gulp-filter-4.0.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/gulp-filter/-/gulp-filter-4.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-filter/-/gulp-filter-4.0.0.tgz",
  "_shasum": "395f58a256c559cdb9e0d157f1caaf5248a38dcb",
  "_shrinkwrap": null,
  "_spec": "gulp-filter@https://registry.npmjs.org/gulp-filter/-/gulp-filter-4.0.0.tgz",
  "_where": "c:\\projects\\RichWebClientTraining\\RichWebClientTypeScript",
  "author": {
    "email": "sindresorhus@gmail.com",
    "name": "Sindre Sorhus",
    "url": "http://sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/gulp-filter/issues"
  },
  "dependencies": {
    "gulp-util": "^3.0.6",
    "multimatch": "^2.0.0",
    "streamfilter": "^1.0.5"
  },
  "description": "Filter files in a vinyl stream",
  "devDependencies": {
    "mocha": "*",
    "xo": "*"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "files": [
    "index.js"
  ],
  "homepage": "https://github.com/sindresorhus/gulp-filter#readme",
  "keywords": [
    "file",
    "files",
    "filter",
    "glob",
    "globbing",
    "gulpplugin",
    "ignore",
    "match",
    "minimatch"
  ],
  "license": "MIT",
  "name": "gulp-filter",
  "optionalDependencies": {},
  "readme": "# gulp-filter [![Build Status](https://travis-ci.org/sindresorhus/gulp-filter.svg?branch=master)](https://travis-ci.org/sindresorhus/gulp-filter)\n\n> Filter files in a [vinyl](https://github.com/wearefractal/vinyl) stream\n\nEnables you to work on a subset of the original files by filtering them using globbing. When you're done and want all the original files back you just use the `restore` stream.\n\n\n## Install\n\n```\n$ npm install --save-dev gulp-filter\n```\n\n\n## Usage\n\n### Filter only\n\nYou may want to just filter the stream content:\n\n```js\nconst gulp = require('gulp');\nconst uglify = require('gulp-uglify');\nconst filter = require('gulp-filter');\n\ngulp.task('default', () => {\n\t// create filter instance inside task function\n\tconst f = filter(['*', '!src/vendor']);\n\n\treturn gulp.src('src/*.js')\n\t\t// filter a subset of the files\n\t\t.pipe(f)\n\t\t// run them through a plugin\n\t\t.pipe(uglify())\n\t\t.pipe(gulp.dest('dist'));\n});\n```\n\n### Restoring filtered files\n\n```js\nconst gulp = require('gulp');\nconst uglify = require('gulp-uglify');\nconst filter = require('gulp-filter');\n\ngulp.task('default', () => {\n\t// create filter instance inside task function\n\tconst f = filter(['*', '!src/vendor'], {restore: true});\n\n\treturn gulp.src('src/*.js')\n\t\t// filter a subset of the files\n\t\t.pipe(f)\n\t\t// run them through a plugin\n\t\t.pipe(uglify())\n\t\t// bring back the previously filtered out files (optional)\n\t\t.pipe(f.restore)\n\t\t.pipe(gulp.dest('dist'));\n});\n```\n\n### Multiple filters\n\nBy combining and restoring different filters you can process different sets of files with a single pipeline.\n\n```js\nconst gulp = require('gulp');\nconst less = require('gulp-less');\nconst concat = require('gulp-concat');\nconst filter = require('gulp-filter');\n\ngulp.task('default', () => {\n\tconst jsFilter = filter('**/*.js', {restore: true});\n\tconst lessFilter = filter('**/*.less', {restore: true});\n\n\treturn gulp.src('assets/**')\n\t\t.pipe(jsFilter)\n\t\t.pipe(concat('bundle.js'))\n\t\t.pipe(jsFilter.restore)\n\t\t.pipe(lessFilter)\n\t\t.pipe(less())\n\t\t.pipe(lessFilter.restore)\n\t\t.pipe(gulp.dest('out/'));\n});\n```\n\n### Restore as a file source\n\nYou can restore filtered files in a different place and use it as a standalone source of files (ReadableStream). Setting the `passthrough` option to `false` allows you to do so.\n\n```js\nconst gulp = require('gulp');\nconst uglify = require('gulp-uglify');\nconst filter = require('gulp-filter');\n\ngulp.task('default', () => {\n\tconst f = filter(['*', '!src/vendor'], {restore: true, passthrough: false});\n\n\tconst stream = gulp.src('src/*.js')\n\t\t// filter a subset of the files\n\t\t.pipe(f)\n\t\t// run them through a plugin\n\t\t.pipe(uglify())\n\t\t.pipe(gulp.dest('dist'));\n\n\t// use filtered files as a gulp file source\n\tf.restore.pipe(gulp.dest('vendor-dist'));\n\n\treturn stream;\n});\n```\n\n\n## API\n\n### filter(pattern, [options])\n\nReturns a [transform stream](http://nodejs.org/api/stream.html#stream_class_stream_transform) with a [.restore](#optionsrestore) object.\n\n#### pattern\n\nType: `string`, `array`, `function`\n\nAccepts a string/array with globbing patterns which are run through [multimatch](https://github.com/sindresorhus/multimatch).\n\nIf you supply a function you'll get a [vinyl file object](https://github.com/wearefractal/vinyl#file) as the first argument and you're expected to return true/false whether to include the file:\n\n```js\nfilter(file => /unicorns/.test(file.path));\n```\n\n#### options\n\nType: `object`\n\nAccepts [minimatch options](https://github.com/isaacs/minimatch#options).\n\n*Note:* Set `dot: true` if you need to match files prefixed with a dot (eg. `.gitignore`).\n\n#### options.restore\n\nType: `boolean`  \nDefault: `false`\n\nRestore filtered files.\n\n#### options.passthrough\n\nType: `boolean`  \nDefault: `true`\n\nWhen set to `true` filtered files are restored with a PassThrough stream, otherwise, when set to `false`, filtered files are restored as a Readable stream.\n\nWhen the stream is Readable it ends by itself, but when PassThrough, you are responsible of ending the stream.\n\n\n## License\n\nMIT Â© [Sindre Sorhus](http://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/gulp-filter.git"
  },
  "scripts": {
    "test": "xo && mocha"
  },
  "version": "4.0.0",
  "xo": {
    "envs": [
      "mocha",
      "node"
    ]
  }
}
